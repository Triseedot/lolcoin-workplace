import os
from aiogram import Bot, types, executor
from aiogram.types import Message
from aiogram.types.message import ContentTypes, ParseMode
import aiogram.utils.markdown as md
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import logging
import psycopg2
from urllib.parse import urlparse
from transactions_parser import parsing
from sending_script import send_lolcoin
import asyncio

# Bot initialization
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)
logging.basicConfig(level=logging.INFO)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

# Admin id define
admin = os.getenv('ADMIN_ID')

# Database setup
DB_URL = os.getenv('DATABASE_URL')
db_parse = urlparse(DB_URL)
db_username = db_parse.username
db_password = db_parse.password
db_name = db_parse.path[1:]
db_hostname = db_parse.hostname
db_port = db_parse.port
conn = psycopg2.connect(
    database=db_name,
    user=db_username,
    password=db_password,
    host=db_hostname,
    port=db_port
)
cur = conn.cursor()
'''
Database structure:
- "*" means preset value 
column(0): id; integer (default = -1)
*column(1): username; char(300)
*column(2): full_name; char(300)
*column(3): wallet_id; char(64) (contains lolcoin wallet id of len 64)
column(4): balance; integer (default = 0)
column(5): is_active; boolean (default = false)
'''


# States initialization
class SG(StatesGroup):
    BasicState = State()
    ReportState = State()
    ServicesList = State()
    WithdrawState = State()
    BuyingState = State()
    SelectStatus = State()
    StatusState = State()
    FinishStatus = State()
    DeleteStatus = State()
    CancelStatus = State()
    ReportNoState = State()


class SellSG(StatesGroup):
    Header = State()
    Description = State()
    DefType = State()
    DefContact = State()
    InMessage = State()
    InFile = State()
    Cost = State()
    Count = State()


class AdminSG(StatesGroup):
    DeleteServiceAS = State()


# Keyboards initialization
cancelkb = types.ReplyKeyboardMarkup(resize_keyboard=True)
cancelbutton = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå')
cancelkb.add(cancelbutton)

skipkb = types.ReplyKeyboardMarkup(resize_keyboard=True)
skipkb.add(types.InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©'))
skipkb.add(cancelbutton)

dskb = types.ReplyKeyboardMarkup(resize_keyboard=True)
dskb.add(types.InlineKeyboardButton(text='DEFAULT')).add(types.InlineKeyboardButton(text='SPECIAL')).add(cancelbutton)

contactkb = types.ReplyKeyboardMarkup(resize_keyboard=True)
contactkb.add(types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òé', request_contact=True)).add(cancelbutton)

backkb = types.ReplyKeyboardMarkup(resize_keyboard=True)
backkb.add(types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚è™'))

basekb = types.ReplyKeyboardMarkup(resize_keyboard=True)
button1 = types.InlineKeyboardButton(text='–ë–∞–ª–∞–Ω—Å üí∏')
button2 = types.InlineKeyboardButton(text="–ñ–∞–ª–æ–±–∞ ‚ùó")
button3 = types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ üìÑ')
button4 = types.InlineKeyboardButton(text='–ó–∞–∫–ª—é—á–∏—Ç—å —Å–¥–µ–ª–∫—É üìù')
button5 = types.InlineKeyboardButton(text='–í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É üí∞')
button6 = types.InlineKeyboardButton(text='–¢–µ–∫—É—â–∏–µ —Å–¥–µ–ª–∫–∏ üíº')
button7 = types.InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ lolcoin üí≥")
button8 = types.InlineKeyboardButton(text="–ö–æ–º–∞–Ω–¥—ã ‚ùî")
button9 = types.InlineKeyboardButton(text="FAQ ‚ùì")
basekb.row(button1, button2).row(button3, button4).row(button5, button6).add(button7).row(button8, button9)


# Switching state and keyboard to basic function
async def switch_to_base(message: Message):
    await SG.BasicState.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å–≤—Ç–∏–µ:", reply_markup=basekb)


# Main part with all bot commands:


# Sending commands list function
async def help_message(message: Message):
    await message.answer('- –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /balance.\n'
                         '- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /services.\n'
                         '- –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é /buy.\n'
                         '- –ß—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sell. \n'
                         '- –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å–æ–º —Ç–µ–∫—É—â–∏—Ö —Å–¥–µ–ª–æ–∫ –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ /status \n'
                         '- –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥–æ–π /withdraw\n'
                         '- –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /faq, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º'
                         ' —Å–ª—É—á–∞–µ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –≤—Å—ë —Ç–æ–≥–æ –∂–µ /report.\n'
                         '- –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /help.\n'
                         '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.')


@dp.message_handler(content_types=['text'], text=['/report'])
async def report_command_no_state(message: Message):
    await message.answer('–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.')
    await SG.ReportNoState.set()


@dp.message_handler(state=SG.ReportNoState)
async def report_send_no_state(message: Message, state: FSMContext):
    await bot.forward_message(admin, message.chat.id, message.message_id)
    await bot.send_message(admin, md.text(str(message.from_user.username), message.from_user.first_name,
                                          str(message.from_user.last_name), sep='\n'))
    await message.answer('–†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ')
    await state.finish()

# Checking if user is in db when starting using bot. If he is not,
# he won't be able to use bot commands until admin add him to users table.
@dp.message_handler(state=None)
async def start(message: Message):
    username = '@' + str(message.from_user.username)
    cur.execute(f"""SELECT * FROM users WHERE username = %s""", (username,))
    result = cur.fetchone()
    if not result:
        surname = message.from_user.last_name
        if not surname:
            username = message.from_user.first_name
        else:
            username = message.from_user.first_name + ' ' + message.from_user.last_name
        cur.execute(f"""SELECT * FROM users WHERE username = %s""", (username,))
        result = cur.fetchone()
    if result:
        if not result[5]:
            cur.execute(
                f"""UPDATE users SET is_active = true WHERE username = %s""",
                (username,)
            )
            cur.execute(
                f"""UPDATE users SET id = %s WHERE username = %s""",
                (message.from_user.id, username,)
            )
            conn.commit()
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {result[1]}! –ú—ã –æ–ø—Ä–µ–¥–µ–∏–ª–∏ –≤–∞—Å, –∫–∞–∫ {result[2].strip()}. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫'
                                 f', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /report. –ï—Å–ª–∏ '
                                 f'—ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —á—É–∂–æ–º—É –∫–æ—à–µ–ª—å–∫—É –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å –≤–∞—à '
                                 f'–±–∞–ª–∞–Ω—Å.')
            await help_message(message)
            await message.answer('–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üôÉ')
            await switch_to_base(message)
        else:
            if result[0] != message.from_user.id:
                await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –Ω–∞–∫–ª–∞–¥–∫–∞, –≤–∏–¥–∏–º–æ —É –≤–∞—Å —Å–æ–≤–ø–∞–ª –Ω–∏–∫ –≤ '
                                     '—Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç–µ —Å –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–≤–æ–∏ –∏–º—è –∏ '
                                     '—Ñ–∞–º–∏–ª–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /report, —á—Ç–æ–±—ã –º—ã –∏—Å–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç—É –æ—à–∏–±–∫—É.')
            else:
                await message.answer(f'–ï—â—ë —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {result[1]}! –ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ '
                                     f'–æ–±–æ—Ä–≤–∞–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –æ–±—Ä–∞–Ω–æ...')
                await switch_to_base(message)
    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Å –∫–∞–∫ —É—á–µ–Ω–∏–∫–∞ –ª–∞–≥–µ—Ä—è –õ–û–õ. –£–≤—ã, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ '
                             '—Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç –∫–∞–∂–¥–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ '
                             '–∫–æ–º–∞–Ω–¥—ã /report')


@dp.message_handler(state='*', content_types=['text'], text=['–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', '/cancel'])
async def cancel_command(message: Message, state=FSMContext):
    current_state = await state.get_state()
    if current_state is None or current_state == SG.BasicState.state or current_state == SG.ServicesList.state \
            or current_state == SG.SelectStatus.state:
        return
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ')
    await switch_to_base(message)


@dp.message_handler(state=[SG.ServicesList, SG.SelectStatus], content_types=['text'],
                    text=['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚è™', '/back'])
async def back(message: Message, state=FSMContext):
    await switch_to_base(message)


# Checking balance command
@dp.message_handler(state=SG.BasicState, content_types=['text'], text=['–ë–∞–ª–∞–Ω—Å üí∏', '/balance'])
async def balance_command(message: Message):
    cur.execute(f"""SELECT balance FROM users WHERE id = %s""", (message.from_user.id,))
    user_balance = float(cur.fetchone()[0]) / 100
    await bot.send_photo(message.chat.id, "https://i.imgur.com/haJcqm1.png",
                         f'<b>–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É {user_balance} lolcoin</b>\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ—Ç 2 lolcoin '
                         f'–Ω–∞ lolcoin_platform.near. –ü—Ä–∏ –ª—é–±–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ 1 lolcoin –±—É–¥–µ—Ç –≤–∑—è—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–∏—Å—Å–∏–∏, '
                         f'–∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã '
                         f'—Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥ –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ï—Å–ª–∏ '
                         f'–∂–µ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–µ –º–µ–Ω–µ–µ 2 lolcoin –≤ –ø–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, '
                         f'–∫–∞–∫ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ "/report".',
                         parse_mode=ParseMode.HTML
                         )


# Report command
@dp.message_handler(state=SG.BasicState, content_types=['text'], text=['–ñ–∞–ª–æ–±–∞ ‚ùó', '/report'])
async def report_command(message: Message):
    await SG.ReportState.set()
    await message.answer('–°–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '
                         '/cancel, –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø—Ü–∏—é –≤ –≤–∞—à–µ–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.',
                         reply_markup=cancelkb)


@dp.message_handler(state=SG.ReportState)
async def report_send(message: Message):
    await bot.forward_message(admin, message.chat.id, message.message_id)
    await bot.send_message(admin, md.text(str(message.from_user.username), message.from_user.first_name,
                                          str(message.from_user.last_name), sep='\n'))
    await message.answer('–†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ')
    await switch_to_base(message)


@dp.message_handler(state=SG.BasicState, content_types=['text'], text=['–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ üìÑ', '/services',
                                                                       '–ó–∞–∫–ª—é—á–∏—Ç—å —Å–¥–µ–ª–∫—É üìù', '/buy'])
async def services_command(message: Message, state: FSMContext):
    cur.execute("""SELECT * FROM products_list ORDER BY id""")
    answer_text = ''
    while True:
        result = cur.fetchone()
        if not result:
            break
        if result[8]:
            answer_text = f"{result[0]}) <i>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</i>\n"
        else:
            answer_text += f"{result[0]}) <b>{result[1]}</b> - {result[9]} –õ–û–õ\n"
    if not answer_text:
        await message.answer('–°–µ–π—á–∞—Å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–≤–∞—Ä–æ–≤, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –≤—ã—Å—Ç–∞–≤–∏–≤ –Ω–∞ '
                             '–ø—Ä–æ–¥–∞–∂—É —Å–≤–æ–π!')
        return
    await message.answer(answer_text, parse_mode="HTML")
    await SG.ServicesList.set()
    async with state.proxy() as data:
        data["is_buying"] = message.text == '–ó–∞–∫–ª—é—á–∏—Ç—å —Å–¥–µ–ª–∫—É üìù' or message.text == '/buy'
        if not data["is_buying"]:
            await message.answer(
                '–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ (—á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º) –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é '
                '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "/back", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.', reply_markup=backkb)
        else:
            await message.answer(
                '–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ (—á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º) –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–≤—à–µ–≥–æ –≤–∞—Å —Ç–æ–≤–∞—Ä–∞, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "/back", —á—Ç–æ–±—ã '
                '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.', reply_markup=backkb)


@dp.message_handler(lambda message: message.text.isdigit(), state=SG.ServicesList)
async def service_desc(message: types.Message, state=FSMContext):
    cur.execute(f"""SELECT * FROM products_list WHERE id = %s AND buyer = 0""", (message.text,))
    result = cur.fetchone()
    if not result:
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –∞–π–¥–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    if result[10]:
        service_type = "SPECIAL"
    else:
        service_type = "DEFAULT"
    if result[2]:
        service_description = result[2]
    else:
        service_description = '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è.'
    await message.answer(md.text(
        md.hbold(result[1]), md.text(service_description), md.hcode('–¢–∏–ø —Ç–æ–≤–∞—Ä–∞ ‚Äî', service_type), sep='\n\n'
        ), parse_mode="HTML"
    )
    async with state.proxy() as data:
        if data["is_buying"]:
            await state.update_data(service_id=int(message.text))
            await message.answer('–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å". –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å —ç—Ç–æ—Ç '
                                 '—Ç–æ–≤–∞—Ä, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–ª–∏–±–æ –¥—Ä—É–≥–æ–µ, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç–º–µ–Ω—ã.',
                                 reply_markup=cancelkb)
            await SG.BuyingState.set()
        else:
            await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ (—á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º) –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å '
                                 '–ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "/back", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.')


@dp.message_handler(state=SG.BuyingState, content_types=['text'])
async def buying_finish(message: Message, state: FSMContext):
    if message.text != "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ')
        await switch_to_base(message)
    else:
        async with state.proxy() as data:
            cur.execute(f"""SELECT balance FROM users WHERE id = %s""", (message.from_user.id,))
            user_result = cur.fetchone()
            cur.execute(f"""SELECT * FROM products_list WHERE id = %s""", (data['service_id'],))
            product_result = cur.fetchone()
            cur.execute(f"""SELECT balance FROM users WHERE id = %s""", (product_result[3],))
            seller_result = cur.fetchone()
            user_balance = float(user_result[0]) / 100
            if message.from_user.id == product_result[3]:
                await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä, –∫–∞–∫–∏–º –±—ã –∑–∞–º–∞–Ω—á–∏–≤—ã–º –æ–Ω –Ω–∏ –±—ã–ª.")
                await switch_to_base(message)
                return
            if int(product_result[9]) <= user_balance:
                if not product_result[10]:
                    await bot.send_message(product_result[3], f'{message.from_user.first_name} –∫—É–ø–∏–ª –≤–∞—à —Ç–æ–≤–∞—Ä —Å '
                                                              f'–Ω–∞–∑–≤–∞–Ω–∏–µ–º "{product_result[1]}"!')
                    cur.execute(
                        """UPDATE users SET balance = %s WHERE id = %s""",
                        (user_result[0] - product_result[9] * 100, message.from_user.id,)
                    )
                    cur.execute(
                        """UPDATE users SET balance = %s WHERE id = %s""",
                        (seller_result[0] + product_result[9] * 100, product_result[3],)
                    )
                    if product_result[7] > 1:
                        cur.execute("""UPDATE products_list SET count = %s WHERE id = %s""",
                                    (product_result[7] - 1, product_result[0],))
                    elif product_result[7] == 1:
                        cur.execute("""DELETE FROM products_list WHERE id = %s""", (product_result[0],))
                        cur.execute("""UPDATE products_list SET id = id - 1 WHERE id > %s""", (product_result[0],))
                        await bot.send_message(product_result[3], '–¢–æ–≤–∞—Ä —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω!!')
                    conn.commit()
                    await message.answer("–ì–æ—Ç–æ–≤–æ!")
                    await bot.forward_message(message.chat.id, product_result[4], product_result[5])
                    if product_result[6]:
                        await bot.forward_message(message.chat.id, product_result[4], product_result[6])
                    if product_result[11]:
                        await bot.forward_message(message.chat.id, product_result[4], product_result[11])
                    await switch_to_base(message)
                else:
                    await bot.send_message(product_result[3], f'{message.from_user.first_name} –∫—É–ø–∏–ª –≤–∞—à SPECIAL —Ç–æ–≤–∞—Ä '
                                                              f'—Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{product_result[1]}"! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å '
                                                              '–ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—à–µ–Ω–∏—è—Ö! –í —Å–ª—É—á–∞–µ '
                                                              '–µ—Å–ª–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã —Å–º–æ–∂–µ—Ç–µ '
                                                              '–æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –º–µ–Ω—é.')
                    cur.execute(
                        """UPDATE users SET balance = %s WHERE id = %s""",
                        (user_result[0] - product_result[9] * 100, message.from_user.id,)
                    )
                    cur.execute("""UPDATE products_list SET buyer = %s WHERE id = %s""",
                                (message.from_user.id, product_result[0],))
                    conn.commit()
                    await message.answer("–ì–æ—Ç–æ–≤–æ! –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É, —á—Ç–æ–±—ã –æ–Ω –ø–µ—Ä–µ–¥–∞–ª –≤–∞–º —Ç–æ–≤–∞—Ä. "
                                         "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏, –Ω–µ –ø–æ–ª–µ–Ω–∏—Ç–µ—Å—å –∑–∞–π—Ç–∏ –≤ –º–µ–Ω—é —Ç–µ–∫—É—â–∏—Ö —Å–¥–µ–ª–æ–∫ –∏ "
                                         "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞–≤—Ü—É –ø—Ä–∏—à–ª–∏ —Å–ø–∏—Å–∞–Ω–Ω—ã–µ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ "
                                         "–¥–µ–Ω—å–≥–∏.")
                    await bot.forward_message(message.chat.id, product_result[4], product_result[5])
                    if product_result[6]:
                        await bot.forward_message(message.chat.id, product_result[4], product_result[6])
                    if product_result[11]:
                        await bot.forward_message(message.chat.id, product_result[4], product_result[11])
                    await switch_to_base(message)
            else:
                await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –õ–û–õ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!')
                await switch_to_base(message)


# Adding product command


@dp.message_handler(state=SG.BasicState, content_types=['text'], text=['–í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É üí∞', '/sell'])
async def sell_command(message: Message, state: FSMContext):
    await SellSG.Header.set()
    await state.update_data(seller=message.from_user.id)
    await state.update_data(chat_id=message.chat.id)
    await message.answer('–ß—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É, –¥–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∑–∞–ø—Ä–µ—â–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã: < _ '
                         '\ *)', reply_markup=cancelkb)


@dp.message_handler(state=SellSG.Header, content_types=['text'])
async def header_def(message: Message, state=FSMContext):
    if len(message.text) > 20:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–æ–µ, –≤–∞–º  –Ω—É–∂–Ω–æ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ 20 —Å–∏–º–≤–æ–ª–æ–≤. –í—Å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é "
                             "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    else:
        if '*' in message.text or chr(92) in message.text or '<' in message.text or '_' in message.text:
            await message.answer('–û–±–Ω–æ—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ < _ \ *')
            return
        async with state.proxy() as data:
            data['name'] = message.text
        await message.answer('–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç —Å –ø–æ–º–æ—à—å—é /skip (–∑–∞–ø—Ä–µ—â–µ–Ω—ã '
                             '—Å–∏–º–≤–æ–ª—ã: < _ \ *)',
                             reply_markup=skipkb)
        await SellSG.next()


@dp.message_handler(state=SellSG.Description, content_types=['text'])
async def description_def(message: Message, state=FSMContext):
    if len(message.text) > 1000:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–æ–µ, –≤–∞–º  –Ω—É–∂–Ω–æ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    elif message.text == '/skip' or message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©':
        async with state.proxy() as data:
            data['description'] = ''
    else:
        if '*' in message.text or chr(92) in message.text or '<' in message.text or '_' in message.text:
            await message.answer('–û–±–Ω–æ—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ < _ \ *')
            return
        async with state.proxy() as data:
            data['description'] = message.text
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ–π–¥—ë–º –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞. –ï—Å–ª–∏ –≤–∞—à —Ç–æ–≤–∞—Ä –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª, '
                         '—Ç–µ–∫—Å—Ç, –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –Ω–∞–∂–º–∏—Ç–µ DEFAULT. –ò–Ω–∞—á–µ –Ω–∞–∂–º–∏—Ç–µ SPECIAL', reply_markup=dskb)
    await SellSG.next()


@dp.message_handler(state=SellSG.DefType, content_types=['text'])
async def type_def(message: Message, state=FSMContext):
    if message.text == 'DEFAULT':
        async with state.proxy() as data:
            data['is_special'] = False
        await state.update_data(contact_id=0)
        await message.answer('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏. –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ '
                             '–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Ç–∞–∫ –∏ —Å–∞–º —Ç–æ–≤–∞—Ä. –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç '
                             '–±—ã—Ç—å –ª—é–±—ã–º, –æ–¥–Ω–∞–∫–æ —É—á—Ç–∏—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—è –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞, '
                             '—ç—Ç–æ –±—É–¥–µ—Ç —É–∂–µ –Ω–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –ª–∏—à—å –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö. –£—á—Ç–∏—Ç–µ, —á—Ç–æ '
                             '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ –±—É–¥–µ—Ç –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—É–Ω–∫—Ç–µ.',
                             reply_markup=cancelkb)
        await SellSG.InMessage.set()
    elif message.text == 'SPECIAL':
        async with state.proxy() as data:
            data['is_special'] = True
        await message.answer('–û—Å–æ–±–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –æ–±—ã—á–Ω—ã—Ö —Ç–µ–º, —á—Ç–æ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º '
                             'telegram. –ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ —Ä–µ—à–∞–µ—Ç –∫—É–ø–∏—Ç—å —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä, —É –Ω–µ–≥–æ —Å –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –¥–µ–Ω—å–≥–∏, '
                             '–Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É –æ–Ω–∏ –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Å –ø–æ–º–æ—â—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ '
                             '–±–æ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç, —á—Ç–æ —Ç–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–¥–∞–Ω. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø—Ä–∏ –æ–±–º–∞–Ω–µ –Ω–∏ –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ '
                             '–Ω–µ –ø–æ–ª—É—á–∏—Ç –≤—ã–≥–æ–¥—ã. –ü–æ—ç—Ç–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞–º —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ '
                             '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫—É–ø–∏–≤—à–µ–º—É. –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—à—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.',
                             reply_markup=contactkb)
        await SellSG.next()
    else:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–≤–æ–¥, –ø–æ–≤–æ—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞')
        return


@dp.message_handler(state=SellSG.DefContact, content_types=['contact'])
async def contact_def(message: Message, state=FSMContext):
    await state.update_data(contact_id=int(message.message_id))
    await message.answer('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏. –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ '
                         '–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Ç–∞–∫ –∏ —Å–∞–º —Ç–æ–≤–∞—Ä. –°–æ–æ–±—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç '
                         '–±—ã—Ç—å –ª—é–±—ã–º. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ –±—É–¥–µ—Ç –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ '
                         '–æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—É–Ω–∫—Ç–µ.', reply_markup=cancelkb)
    await SellSG.next()


@dp.message_handler(state=SellSG.InMessage, content_types=types.ContentType.ANY)
async def in_message(message: Message, state=FSMContext):
    await state.update_data(message_id=int(message.message_id))
    await message.answer('–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤–∞—à —Ç–æ–≤–∞—Ä –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ. –ò–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å–∫—Ç–∏—Ç–µ –ø—É–Ω–∫—Ç.',
                         reply_markup=skipkb)
    await SellSG.next()


@dp.message_handler(state=SellSG.InFile, content_types=['text'], text=['/skip', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©'])
async def in_file_skip(message: Message, state=FSMContext):
    await state.update_data(file_id=0)
    await message.answer('–ü–µ—Ä–µ–π–¥–µ–º –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —á–∞—Å—Ç–∏. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞. –í —Å–∏–ª—É —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ —É–¥–æ–±–Ω–æ–≥–æ '
                         '–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 2 –õ–û–õ–∫–æ–∏–Ω–æ–≤ –∏ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.', reply_markup=cancelkb)
    await SellSG.next()


@dp.message_handler(state=SellSG.InFile, content_types=['document'])
async def in_file_def(message: types.Message, state=FSMContext):
    await state.update_data(file_id=message.message_id)
    await message.answer('–ü–µ—Ä–µ–π–¥–µ–º –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —á–∞—Å—Ç–∏. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞. –í —Å–∏–ª—É —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ —É–¥–æ–±–Ω–æ–≥–æ '
                         '–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 2 –õ–û–õ–∫–æ–∏–Ω–æ–≤ –∏ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.', reply_markup=cancelkb)
    await SellSG.next()


@dp.message_handler(lambda message: message.text.isdigit(), state=SellSG.Cost)
async def cost_def(message: types.Message, state=FSMContext):
    if int(message.text) > 5000:
        await message.answer('–≠—Ç–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–ª—è —Ü–µ–Ω—ã –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.')
        return
    if int(message.text) >= 2:
        await state.update_data(cost=int(message.text))
    else:
        await message.answer('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –õ–û–õ–∫–æ–∏–Ω–æ–≤')
        return
    await message.answer('–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å - —Å–∫–æ–ª—å–∫–∏–º –ª—é–¥—è–º –≤—ã –ø—Ä–æ–¥–∞–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä? –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ–µ —á–∏—Å–ª–æ '
                         '–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.', reply_markup=skipkb)
    await SellSG.next()


async def add_product(state, message):
    async with state.proxy() as data:
        cur.execute("""SELECT COUNT(*) FROM products_list""")
        if cur.fetchone()[0]:
            cur.execute("""SELECT id FROM products_list ORDER BY id DESC LIMIT 1""")
            product_id = cur.fetchone()[0] + 1
        else:
            product_id = 1
        cur.execute(f"""INSERT INTO products_list (id, product_name, description, seller, chat_id, message_id, file_id, 
        count, cost, is_special, contact_id) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""",
                    (product_id, data['name'], data['description'], data['seller'], data['chat_id'], data['message_id'],
                     data['file_id'], data['count'], data['cost'], data['is_special'],
                     data['contact_id'],))
        conn.commit()
        await message.answer('–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –≤–∞—à —Ç–æ–≤–∞—Ä –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ üëç')
    await switch_to_base(message)


@dp.message_handler(lambda message: message.text.isdigit(), state=SellSG.Count)
async def count_def(message: types.Message, state=FSMContext):
    if int(message.text) > 150:
        await message.answer('–£ –Ω–∞—Å –≤—Å–µ–≥–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –º–µ–Ω–µ–µ 150 —á–µ–ª–æ–≤–µ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.')
        return
    if int(message.text) >= 1:
        await state.update_data(count=int(message.text))
    else:
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è')
        return
    await add_product(state, message)


@dp.message_handler(state=SellSG.Count, content_types=['text'], text=['/skip', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©'])
async def count_skip(message: types.Message, state=FSMContext):
    await state.update_data(count=0)
    await add_product(state, message)


@dp.message_handler(state=SellSG, content_types=types.ContentType.ANY)
async def sell_unknown(message: types.Message):
    await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–≤–æ–¥, —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.')


@dp.message_handler(state=SG.BasicState, content_types=['text'], text=['/status', '–¢–µ–∫—É—â–∏–µ —Å–¥–µ–ª–∫–∏ üíº'])
async def status_command(message: types.Message):
    cur.execute("""SELECT * FROM products_list WHERE seller = %s ORDER BY id""", (message.from_user.id,))
    answer_text = '<b>–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã, –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:</b>\n'
    sell_products = ''
    while True:
        result = cur.fetchone()
        if not result:
            break
        sell_products += f"{result[0]}) <b>{result[1]}</b> - {result[9]} –õ–û–õ\n"
    if not sell_products:
        sell_products = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."
    await message.answer(answer_text + sell_products, parse_mode="HTML")
    cur.execute("""SELECT * FROM products_list WHERE buyer = %s ORDER BY id""", (message.from_user.id,))
    answer_text = '<b>–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n'
    buy_products = ''
    while True:
        result = cur.fetchone()
        if not result:
            break
        buy_products += f"{result[0]}) <b>{result[1]}</b> - {result[9]} –õ–û–õ\n"
    if not buy_products:
        buy_products = "–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö SPECIAL —Ç–æ–≤–∞—Ä–æ–≤."
    await message.answer(answer_text + buy_products, parse_mode="HTML")
    await message.answer(
        '–ù–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ (—á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º) –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é '
        '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º, –∏–ª–º –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ù–∞–ø–∏—à–∏—Ç–µ "/back", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.', reply_markup=backkb)
    await SG.SelectStatus.set()


@dp.message_handler(lambda message: message.text.isdigit(), state=SG.SelectStatus)
async def status_select(message: types.Message, state: FSMContext):
    cur.execute(f"""SELECT * FROM products_list WHERE (seller = %s OR buyer = %s) AND id = %s""",
                (message.from_user.id, message.from_user.id, int(message.text)))
    result = cur.fetchone()
    await state.update_data(product_id=result[0])
    if not result:
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –∞–π–¥–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    if result[10]:
        service_type = "SPECIAL"
    else:
        service_type = "DEFAULT"
    if result[2]:
        service_description = result[2]
    else:
        service_description = '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è.'
    if result[3] == message.from_user.id:
        if result[8]:
            service_status = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é."
        else:
            service_status = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è."
        await message.answer(md.text(
            md.hbold(result[1]), md.text(service_description), md.hcode('–¢–∏–ø —Ç–æ–≤–∞—Ä–∞ ‚Äî', service_type),
            md.text('–û—Å—Ç–∞–ª–æ—Å—å:', result[7]), md.text('–°—Ç–∞—Ç—É—Å:', service_status), sep='\n\n'
        ), parse_mode="HTML"
        )
        if result[8]:
            await message.answer(
                '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é? –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å —ç—Ç–æ '
                '–¥–µ–π—Å—Ç–≤–∏–µ, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–ª–∏–±–æ –∫—Ä–æ–º–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å".',
                reply_markup=cancelkb)
            await SG.CancelStatus.set()
        else:
            await message.answer(
                '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä? –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å —ç—Ç–æ '
                '–¥–µ–π—Å—Ç–≤–∏–µ, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–ª–∏–±–æ –∫—Ä–æ–º–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å".',
                reply_markup=cancelkb)
            await SG.DeleteStatus.set()
    else:
        service_status = "–í –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏."
        await message.answer(md.text(
            md.hbold({result[1]}), md.text(service_description), md.hcode('–¢–∏–ø —Ç–æ–≤–∞—Ä–∞ ‚Äî', service_type),
            md.text('–°—Ç–∞—Ç—É—Å:', service_status), sep='\n\n'
            ), parse_mode="HTML"
        )
        await message.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "–¢–æ–≤–∞—Ä –ø–µ—Ä–µ–¥–∞–Ω"? –î–µ–ª–∞–π—Ç–µ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ '
                             '–ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–≤–∞—Ä, –∏–Ω–∞—á–µ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –Ω–µ —É–¥—É—Ç –≤ –Ω–∏–∫—É–¥–∞. '
                             '–ß—Ç–æ–±—ã –ø–æ–¥–≤—Ç–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å". –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å —ç—Ç–æ '
                             '–¥–µ–π—Å—Ç–≤–∏–µ, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–ª–∏–±–æ –∫—Ä–æ–º–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å".',
                             reply_markup=cancelkb)
        await SG.FinishStatus.set()


@dp.message_handler(state=SG.DeleteStatus, content_types=['text'])
async def delete_product_command(message: types.Message, state: FSMContext):
    if message.text != '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ')
        await switch_to_base(message)
    else:
        async with state.proxy() as data:
            cur.execute("""DELETE FROM products_list WHERE id = %s""", (data["product_id"],))
            cur.execute("""UPDATE products_list SET id = id - 1 WHERE id > %s""", (data["product_id"],))
            conn.commit()
        await message.answer("–ì–æ—Ç–æ–≤–æ!")
        await switch_to_base(message)


@dp.message_handler(state=SG.FinishStatus, content_types=['text'])
async def finish_product_command(message: types.Message, state: FSMContext):
    if message.text != '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ')
        await switch_to_base(message)
    else:
        async with state.proxy() as data:
            cur.execute(f"""SELECT balance FROM users WHERE id = %s""", (message.from_user.id,))
            user_result = cur.fetchone()
            cur.execute(f"""SELECT * FROM products_list WHERE id = %s""", (data['product_id'],))
            product_result = cur.fetchone()
            cur.execute(f"""SELECT balance FROM users WHERE id = %s""", (product_result[3],))
            seller_result = cur.fetchone()
        cur.execute(
            """UPDATE users SET balance = %s WHERE id = %s""",
            (seller_result[0] + product_result[9] * 100, product_result[3],)
        )
        cur.execute("""UPDATE products_list SET buyer = 0""")
        await bot.send_message(product_result[3], f'–°–¥–µ–ª–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–∞ {product_result[1]} –∑–∞–∫—Ä—ã—Ç–∞! –í–∞–º –±—ã–ª–æ '
                                                  f'–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {product_result[9]} –õ–û–õ –Ω–∞ –±–∞–ª–∞–Ω—Å.')
        if product_result[7] > 1:
            cur.execute("""UPDATE products_list SET count = %s WHERE id = %s""",
                        (product_result[7] - 1, product_result[0],))
        elif product_result[7] == 1:
            cur.execute("""DELETE FROM products_list WHERE id = %s""", (product_result[0],))
            cur.execute("""UPDATE products_list SET id = id - 1 WHERE id > %s""", (product_result[0],))
            await bot.send_message(product_result[3], '–¢–æ–≤–∞—Ä —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω!!')
        conn.commit()
        await message.answer("–ì–æ—Ç–æ–≤–æ!")
        await switch_to_base(message)


@dp.message_handler(state=SG.CancelStatus, content_types=['text'])
async def cancel_product_command(message: types.Message, state: FSMContext):
    if message.text != '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ')
        await switch_to_base(message)
    else:
        async with state.proxy() as data:
            cur.execute(f"""SELECT balance FROM users WHERE id = %s""", (message.from_user.id,))
            user_result = cur.fetchone()
            cur.execute(f"""SELECT * FROM products_list WHERE id = %s""", (data['product_id'],))
            product_result = cur.fetchone()
            cur.execute(f"""SELECT balance FROM users WHERE id = %s""", (product_result[8],))
            buyer_result = cur.fetchone()
            cur.execute(
                """UPDATE users SET balance = %s WHERE id = %s""",
                (buyer_result[0] + product_result[9] * 100, product_result[8],)
            )
            await bot.send_message(product_result[8], f'–°–¥–µ–ª–∫–∞ –ø–æ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞ {product_result[1]} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, '
                                                      f'–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.')
            cur.execute("""UPDATE products_list SET buyer = 0 WHERE id = %s""",
                        (product_result[0],))
            conn.commit()
            await message.answer('–ì–æ—Ç–æ–≤–æ!')
            await switch_to_base(message)


@dp.message_handler(state=SG.BasicState, content_types=['text'], text=['/withdraw', '–í—ã–≤–µ—Å—Ç–∏ lolcoin üí≥'])
async def withdraw_command(message: types.Message):
    cur.execute(f"""SELECT balance FROM users WHERE id = '{message.from_user.id}'""")
    user_balance = float(cur.fetchone()[0]) / 100
    await message.answer("–°–∫–æ–ª—å–∫–æ –õ–û–õ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏? –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ ‚Äî —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. (–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ "
                         f"{user_balance} lolcoin)", reply_markup=cancelkb)
    await SG.WithdrawState.set()


@dp.message_handler(lambda message: message.text.isdigit(), state=SG.WithdrawState)
async def withdraw_transfer(message: types.Message):
    cur.execute(f"""SELECT balance, wallet_id FROM users WHERE id = '{message.from_user.id}'""")
    result = cur.fetchone()
    user_balance = float(result[0]) / 100
    user_wallet = str(result[1])
    if not int(message.text):
        await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ 0 –õ–û–õ–∫–æ–∏–Ω–æ–≤!')
    elif int(message.text) <= user_balance:
        await message.answer("–ü–µ—Ä–µ–≤–æ–¥–∏–º lolcoin –≤–∞–º –Ω–∞ –∫–æ—à–µ–ª—ë–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                             "–ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        post = await send_lolcoin(user_wallet, int(message.text) * 100)
        print(post.text, user_wallet, int(message.text), sep='\n')
        cur.execute(
            f"""UPDATE users SET balance = %s WHERE id = %s""",
            (int(result[0]) - int(message.text) * 100, message.from_user.id)
        )
        conn.commit()
        await message.answer("–ì–æ—Ç–æ–≤–æ!")
        await switch_to_base(message)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –õ–û–õ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!')


@dp.message_handler(state=SG.WithdrawState, content_types=types.ContentType.ANY)
async def withdraw_unknown(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é')


# Help command sending list of commands
@dp.message_handler(state=SG.BasicState, content_types=['text'], text=['–ö–æ–º–∞–Ω–¥—ã ‚ùî', '/help'])
async def help_command(message: Message):
    await help_message(message)


@dp.message_handler(state=SG.BasicState, content_types=['text'], text=['FAQ ‚ùì', '/faq'])
async def faq_command(message: Message):
    await message.answer('*–í–æ–ø—Ä–æ—Å:* –ü–æ—á–µ–º—É –º—ã –º–æ–∂–µ–º –≤–∞–º –¥–æ–≤–µ—Ä—è—Ç—å?\n'
                         '*–û—Ç–≤–µ—Ç:* –ù–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫—Ä–∞–π–Ω–µ –º–∞–ª—É—é –≤ –º–∞—Å—à—Ç–∞–±–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—é, '
                         '–∫–æ—Ç–æ—Ä–∞—è —É–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç. –õ—é–±–æ–π –æ–±–º–∞–Ω –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—à—É —Ä–µ–ø—É—Ç–∞—Ü–∏—é –¥–æ—Å—Ç–∞—Ç–æ—á–∫–æ '
                         '—Å–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã —Ç–∞ —Å–∞–º–∞—è –Ω–µ–±–æ–ª—å—à–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Ç–µ—Ä—è–ª–∞ –¥–æ–≤–µ—Ä–∏—è, —á—Ç–æ, –ø–æ —Å—É—Ç–∏, '
                         '–±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∫–æ–Ω–µ—Ü –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –ü–æ–º–∏–º–æ —Ç–æ–≥–æ, –º—ã –Ω–µ —Ç—Ä–µ–±—É–µ–º –Ω–∏–∫–∞–∫–∏—Ö –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, '
                         '–≤—ã —Ä–µ—à–∞–µ—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω–∞–º –¥–æ–≤–µ—Ä–∏—Ç—å  –∞ –º—ã –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –æ–±–µ—â–∞–µ–º,  —á—Ç–æ –≤—Å–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –≤–∞—à–µ–º '
                         '–±–∞–ª–∞–Ω—Å–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏–∏.\n\n'
                         '*–í–æ–ø—Ä–æ—Å:* –ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞?\n'
                         '*–û—Ç–≤–µ—Ç:* –û–±—ã—á–Ω—ã–µ (DEFAULT) —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã '
                         '–æ–¥–Ω–∏–º, –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. \n'
                         '–û—Å–æ–±–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –æ–±—ã—á–Ω—ã—Ö —Ç–µ–º, —á—Ç–æ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º '
                         'telegram. –ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ —Ä–µ—à–∞–µ—Ç –∫—É–ø–∏—Ç—å —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä, —É –Ω–µ–≥–æ —Å –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –¥–µ–Ω—å–≥–∏, '
                         '–Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É –æ–Ω–∏ –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Å –ø–æ–º–æ—â—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ '
                         '–±–æ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç, —á—Ç–æ —Ç–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø—Ä–∏ –æ–±–º–∞–Ω–µ –Ω–∏ –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ '
                         '–Ω–µ –ø–æ–ª—É—á–∏—Ç –≤—ã–≥–æ–¥—ã. –ü–æ—ç—Ç–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞–º —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ '
                         '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫—É–ø–∏–≤—à–µ–º—É. –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—à—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.\n\n'
                         '*–í–æ–ø—Ä–æ—Å:* –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?\n'
                         '*–û—Ç–≤–µ—Ç:* –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞, –∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, —Ç–∞–∫ —á—Ç–æ '
                         '–ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å—á–∏—Ç–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–π –Ω–µ–ª—å–∑—è. –û–¥–Ω–∞–∫–æ –Ω–∏–∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —á–µ–ª–æ–≤–µ–∫ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å '
                         '–¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, —Ç–∞–∫ —á—Ç–æ –≤—Å—ë, —á—Ç–æ –Ω–∞ –Ω–µ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Å—Ç–∞–µ—Ç—Å—è –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –õ–û–õ-2022\n\n'
                         '*–í–æ–ø—Ä–æ—Å:* –ú–æ–≥—É—Ç –ª–∏ –º–µ–Ω—è –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã?\n'
                         '*–û—Ç–≤–µ—Ç:* –î–∞. –í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–æ—Ç–∞, '
                         '—à—É—Ç–æ—á–Ω—ã–µ –æ—Ä–¥–µ—Ä—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É, —Ç–æ–≤–∞—Ä, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–∞–∑–≤–∞–Ω–∏—é, –∏–ª–∏ –∑–∞ –ª—é–±–æ–µ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–µ–µ –≤ '
                         '–Ω–∞—à–µ–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.',
                         parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(commands="del", state=SG.BasicState)
async def delete_command_as(message: types.Message):
    if message.from_user.id != int(admin):
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–ø–æ–∑–Ω–∞–Ω–æ.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —É–¥–∞–ª—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
    await AdminSG.DeleteServiceAS.set()


@dp.message_handler(lambda message: message.text.isdigit(), state=SG.SelectStatus)
async def delete_index_as(message: Message):
    if message.text == 0:
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ')
        await switch_to_base(message)
    else:
        cur.execute("""DELETE FROM products_list WHERE id = %s""", (int(message.text),))
        cur.execute("""UPDATE products_list SET id = id - 1 WHERE id > %s""", (int(message.text),))
        conn.commit()
        await message.answer("–ì–æ—Ç–æ–≤–æ!")
        await switch_to_base(message)


@dp.message_handler(state='*', content_types=types.ContentType.ANY)
async def unknown_command(message: Message):
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–ø–æ–∑–Ω–∞–Ω–æ.")


# Checking for new transfer every "wait_for" seconds
async def check(wait_for):
    print("Debug: check is awaited")
    while True:
        print("Debug: inside while")
        await asyncio.sleep(wait_for)
        print("after sleep")
        transactions = await parsing()
        if transactions:
            for transaction in transactions:
                logging.warning(transaction["amount"])
                cur.execute(f"""SELECT * FROM users WHERE wallet_id = %s""", (transaction["sender"],))
                result = cur.fetchone()
                if result and transaction["amount"] >= 200:
                    result = [result[0], result[4]]
                    cur.execute(
                        f"""UPDATE users SET balance = %s WHERE id = %s""",
                        (result[1] + transaction["amount"] - 100, result[0],)
                    )
                    await bot.send_message(result[0], f"‚úÖ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É {transaction['amount'] / 100}"
                                                      f" lolcoin, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö {transaction['amount'] / 100 - 1} –±—ã–ª–∏"
                                                      " –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å, –∞ –æ—Å—Ç–∞–≤—à–∏–π—Å—è 1 –õ–û–õ–∫–æ–∏–Ω –≤–∑—è—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ"
                                                      " –∫–æ–º–∏—Å—Å–∏–∏.")
            conn.commit()


# Bot start
if __name__ == '__main__':
    future = asyncio.ensure_future(check(60))
    executor.start_polling(dp, skip_updates=True)
